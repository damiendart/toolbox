#!/bin/sh
#
# A fuzzy ripgrep launcher.
#
# This file was written by Damien Dart, <damiendart@pobox.com>. This is
# free and unencumbered software released into the public domain. For
# more information, please refer to the accompanying "UNLICENCE" file.

set -e

help() {
  cat << HELP
A fuzzy ripgrep launcher.

Usage: $(basename "$0") [FLAGS] [INITIAL-QUERY]

If the GNU version of getopt is available it will be used to preprocess
command-line arguments, enabling support for grouped short options and
other niceties.

By default, ignore files (e.g. ".gitignore") in the current working
directory are respected.

FLAGS:

  -h, --help
    Display this help text and exit.

  --vim
    Enable "Vim mode", which adjusts the application's functionality for
    better Vim and "fuzzy-finders.vim" integration.

ACTIONS:

  ENTER
    Opens the first selected match in Vim and creates a quickfix list
    with all selected matches if multiple matches are selected. In Vim
    mode, the first selected match is opened with ":edit".

  CTRL-A
    Selects all matches.

  CTRL-C
    Exits without any further action.

  CTRL-D
    Deselects all matches.

  CTRL-E
    Toggles between respecting ignore files in the current working
    directory (the default) or searching every file.

  CTRL-T
    (Vim mode only.) Opens the first selected match using ":tabe" and
    creates a quickfix list with all selected matches if there are
    multiple selected matches.

  CTRL-V
    (Vim mode only.) Opens the first selected match using ":vsplit" and
    creates a quickfix list with all selected matches if there are
    multiple selected matches.

  CTRL-X
    (Vim mode only.) Opens the first selected match using ":split" and
    creates a quickfix list with all selected matches if there are
    multiple selected matches.

  F1
    Displays this help text and exits. In Vim mode, the "toolbox.txt"
    help file will be opened to the relavant section.
HELP
}

VIM_MODE=0

# Using the GNU version of getopt to parse command-line arguments adds
# support for grouped short options and other niceties.
if test "$(getopt --test >/dev/null 2>&1 && echo "$?" || echo "$?")" -eq 4; then
  if ! ARGS=$(getopt -l help,vim -n "$(basename "$0")" -o h -- "$@"); then
    printf 'See "%s --help" for available options\n' "$(basename "$0")" >&2
    exit 2
  fi

  eval set -- "$ARGS"
fi

if ! type 'fzf' 1>/dev/null 2>&1 || \
  ! type 'mktemp' 1>/dev/null 2>&1 || \
  ! type 'pathshorten' 1>/dev/null 2>&1 || \
  ! type 'rg' 1>/dev/null 2>&1 || \
  ! type 'vim' 1>/dev/null 2>&1;
then
  printf 'ERROR: "%s" requires fzf, mktemp, pathshorten, rg, and vim\n' "$(basename "$0")" >&2
  exit 2
fi

# The following command-line argument and option parser is based on
# <http://mywiki.wooledge.org/BashFAQ/035>.
while :; do
  case $1 in
    -h|-\?|--help)
      help
      exit
      ;;
    --vim)
      VIM_MODE=1
      ;;
    --)
      shift
      break
      ;;
    -?*)
      printf 'ERROR: Unknown option: "%s"\n' "$1" >&2
      printf 'See "%s --help" for available options\n' "$(basename "$0")" >&2
      exit 2
      ;;
    *)
      break
  esac

  shift
done

FZF_EXPECT='f1'
FZF_HEIGHT='20'
INITIAL_QUERY="${*:-}"

# shellcheck disable=SC2016
export INPUT_TRANSFORM='
  RELOAD_BASE="reload:rg --color=always --column --hidden --line-number --smart-case %s -- \{q} || true"

  if [[ "$FZF_QUERY" == "" ]]; then
    echo "reload:true"
  else
    case "$FZF_PROMPT" in
      *★*)
        printf "$RELOAD_BASE" "--no-ignore"
        ;;
      *)
        printf "$RELOAD_BASE" "--glob=\"!.git/\""
        ;;
    esac
  fi
'

# shellcheck disable=SC2016
PROMPT_TRANSFORM='
  case "$FZF_PROMPT" in
    *★*)
      echo "change-prompt(($(pathshorten)) )+transform:$INPUT_TRANSFORM"
      ;;
    *)
      echo "change-prompt(($(pathshorten))★ )+transform:$INPUT_TRANSFORM"
      ;;
  esac
'

if [ "$VIM_MODE" = 1 ]; then
  FZF_EXPECT='ctrl-t,ctrl-v,ctrl-x,f1'
  FZF_HEIGHT='100%'
fi

set +e

# - CTRL+Z process suspension is suppressed as it doesn't work properly
#   (see <https://github.com/junegunn/fzf/issues/2289>). Escape is also
#   ignored as spamming it to abort fzf occasionally adds garbage "[A"
#   entries to the Bash command history.
#
# - Giving fzf some initial empty input seems to speed up the "first
#   paint" a touch (it's so slight, but it's one of those things that I
#   can't unsee once I'm aware of it).
#
# - The `sleep 0.1` acts as a poor-man's debouncer, reducing the number
#   of ripgrep processes running while typing a query.
FZF_OUTPUT=$(\
  # shellcheck disable=SC2016,SC2059
  true | fzf \
    --ansi \
    --bind='ctrl-a:select-all,ctrl-d:deselect-all' \
    --bind="ctrl-e:transform:$PROMPT_TRANSFORM" \
    --bind='ctrl-z:ignore,esc:ignore' \
    --bind='backward-eof:abort' \
    --bind="change:reload:sleep 0.1" \
    --bind="change:transform:$INPUT_TRANSFORM" \
    --bind="start:transform:$INPUT_TRANSFORM" \
    --border-label="Press F1 for help" \
    --border-label-pos='-3:bottom' \
    --disabled \
    --delimiter=':' \
    --expect="$FZF_EXPECT" \
    --height="$FZF_HEIGHT" \
    --info='inline-right' \
    --multi \
    --preview='(nl -ba {1} | grep --color=always -E "$(printf "|^\s*%s\s.*" {2})") 2>/dev/null' \
    --preview-window='+{2}/3,<80(down)' \
    --prompt="($(pathshorten)) " \
    --query="$INITIAL_QUERY" \
)
FZF_STATUS="$?"
SELECTED_ACTION=$(printf "%s" "$FZF_OUTPUT" | head -1)
SELECTED_OUTPUT=$(printf "%s" "$FZF_OUTPUT" | tail -n +2)

case $SELECTED_ACTION in
  f1*)
    if [ "$VIM_MODE" = 1 ]; then
      echo "$SELECTED_ACTION"
    else
      help
    fi

    exit
    ;;
esac

if [ "$FZF_STATUS" != 0 ]; then
  # Allow this script to exit cleanly if fzf exits with a return code of
  # 1, signalling that no matches were made, or 130, signalling that it
  # was aborted or interrupted by the user.
  if [ "$FZF_STATUS" = 1 ] || [ "$FZF_STATUS" = 130 ]; then
    exit
  else
    exit $FZF_STATUS
  fi
fi

set -e

case $SELECTED_ACTION in
  *)
    if [ "$VIM_MODE" = 1 ]; then
      printf "%s" "$FZF_OUTPUT"
    else
      TEMP_FILE=$(mktemp)

      printf "%s" "$SELECTED_OUTPUT" > "$TEMP_FILE"
      exec vim +cw -q "$TEMP_FILE"
    fi
    ;;
esac
