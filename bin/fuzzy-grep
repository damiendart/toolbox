#!/bin/sh
#
# A fuzzy ripgrep launcher.
#
# This file was written by Damien Dart, <damiendart@pobox.com>. This is
# free and unencumbered software released into the public domain. For
# more information, please refer to the accompanying "UNLICENCE" file.

set -e

help() {
  cat << HELP
A fuzzy ripgrep launcher.

Usage: $(basename "$0") [FLAGS] [INITIAL-QUERY]

If the GNU version of getopt is available it will be used to preprocess
command-line arguments, enabling support for grouped short options and
other niceties.

FLAGS:

  -h, --help
    Display this help text and exit.

  --vim
    Enable "Vim mode", which adjusts the application's functionality for
    better Vim and "fuzzy-finders.vim" integration.

ACTIONS:

  ENTER
    Opens the first selected match in Vim and creates a quickfix list
    with all selected matches.

  CTRL-A
    Selects all matches.

  CTRL-C
    Exits without any further action.

  CTRL-D
    Deselects all matches.

  CTRL-E
    Toggles between respecting ignore files (e.g. ".gitignore") in the
    current working directory (the default) or searching every file.
HELP
}

# The "sleep" command acts as a debouncer, reducing the number of
# ripgrep processes running while typing a query.
RG_BASE='test -n {q} && (sleep %s; rg --color=always --column --hidden --line-number --smart-case %s -- {q}) || true'

VIM_MODE=0

# Using the GNU version of getopt to parse command-line arguments adds
# support for grouped short options and other niceties.
if test "$(getopt --test >/dev/null 2>&1 && echo "$?" || echo "$?")" -eq 4; then
  if ! ARGS=$(getopt -l fzf-transform-input:,fzf-transform-prompt,help,vim -n "$(basename "$0")" -o h -- "$@"); then
    printf 'See "%s --help" for available options\n' "$(basename "$0")" >&2
    exit 2
  fi

  eval set -- "$ARGS"
fi

if ! type 'fzf' 1>/dev/null 2>&1 || \
  ! type 'mktemp' 1>/dev/null 2>&1 || \
  ! type 'pathshorten' 1>/dev/null 2>&1 || \
  ! type 'rg' 1>/dev/null 2>&1 || \
  ! type 'vim' 1>/dev/null 2>&1;
then
  printf 'ERROR: "%s" requires fzf, mktemp, pathshorten, rg, and vim\n' "$(basename "$0")" >&2
  exit 2
fi

# The following command-line argument and option parser is based on
# <http://mywiki.wooledge.org/BashFAQ/035>.
while :; do
  case $1 in
    -h|-\?|--help)
      help
      exit
      ;;
    --fzf-transform-input)
      case "$FZF_PROMPT" in
        \[*)
          # shellcheck disable=SC2059
          printf "reload:$RG_BASE" "$2" "--no-ignore"
          ;;
        *)
          # shellcheck disable=SC2059
          printf "reload:$RG_BASE" "$2" ""
          ;;
      esac
      exit
      ;;
    --fzf-transform-prompt)
      case "$FZF_PROMPT" in
        \[*)
          echo "change-prompt(($(pathshorten)) )+transform($0 --fzf-transform-input 0)"
          ;;
        *)
          echo "change-prompt([$(pathshorten)] )+transform($0 --fzf-transform-input 0)"
          ;;
      esac
      exit
      ;;
    --vim)
      VIM_MODE=1
      ;;
    --)
      shift
      break
      ;;
    -?*)
      printf 'ERROR: Unknown option: "%s"\n' "$1" >&2
      printf 'See "%s --help" for available options\n' "$(basename "$0")" >&2
      exit 2
      ;;
    *)
      break
  esac

  shift
done

FZF_HEIGHT='15'
INITIAL_QUERY="${*:-}"

if [ "$VIM_MODE" = 1 ]; then
  FZF_HEIGHT='100%'
fi

# CTRL+Z process suspension is suppressed as it doesn't work properly
# (see <https://github.com/junegunn/fzf/issues/2289>). Escape is also
# ignored as spamming it to abort fzf occasionally adds garbage "[A"
# entries to the Bash command history.
#
# Dash is a little bit faster at executing shell commands; see
# <https://github.com/junegunn/fzf/issues/4367#issuecomment-2831703942>.
FZF_OUTPUT=$(\
  # shellcheck disable=SC2016,SC2059
  fzf \
    --ansi \
    --bind='ctrl-a:select-all,ctrl-d:deselect-all' \
    --bind="ctrl-e:transform($0 --fzf-transform-prompt)" \
    --bind='ctrl-z:ignore,esc:ignore' \
    --bind='backward-eof:abort' \
    --bind="change:transform($0 --fzf-transform-input 0.2)" \
    --bind="start:reload:$(printf "$RG_BASE" "0" "")" \
    --border \
    --disabled \
    --delimiter=':' \
    --height="$FZF_HEIGHT" \
    --info='inline-right' \
    --layout=reverse \
    --multi \
    --preview='/usr/bin/dash -c "(nl -ba {1} | grep --color=always -E \"$(printf "|^\s*%s\s.*" {2})\") 2>/dev/null"' \
    --preview-window='+{2}/3,<80(down)' \
    --prompt="($(pathshorten)) " \
    --query="$INITIAL_QUERY" \
    --with-shell='/usr/bin/dash -c' \
)

if [ "$VIM_MODE" = 1 ]; then
  printf "%s" "$FZF_OUTPUT"
else
  TEMP_FILE=$(mktemp)

  printf "%s" "$FZF_OUTPUT" > "$TEMP_FILE"
  exec vim +'cw 15' -q "$TEMP_FILE"
fi
