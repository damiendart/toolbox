#!/bin/sh
#
# A simple fzf-powered Kubernetes pod browser.
#
# This file was written by Damien Dart, <damiendart@pobox.com>. This is
# free and unencumbered software released into the public domain. For
# more information, please refer to the accompanying "UNLICENCE" file.

set -e

help() {
  cat << HELP
Usage: $(basename "$0") [FLAGS] [INITIAL-QUERY]

Opens up a fzf-powered Kubernetes pod browser.

Requires fzf and kubectl. If the GNU version of getopt is available it
will be used to parse command-line arguments, adding support for grouped
short options and other niceties.

FLAGS:

  -h, --help
    Display this help text and exit.

  -n NAMESPACE, --namespace=NAMESPACE
    Specify the namespace for "kubectl" to use.

FZF COMMANDS:

  ENTER
    Get a Bash shell to the default container of the selected pod.

  CTRL-C
    Exit without any further action.

  CTRL-D
    Fetch details about the selected pod.

  CTRL-L
    Print the last 500 log entries from the selected pod.

  CTRL-R
    Refresh the list of pods.

  CTRL-Y
    Copy the selected pod name to the clipboard.

  CTRL-ALT-Y
    Copy the selected namespace and pod name to the clipboard.

  F1
    Display this help text and exit.
HELP
}

# shellcheck disable=2034
FZF_DEFAULT_COMMAND='kubectl get pods'

# Using the GNU version of getopt to parse command-line arguments adds
# support for grouped short options and other niceties.
if test "$(getopt --test >/dev/null 2>&1 && echo "$?" || echo "$?")" -eq 4; then
  if ! ARGS=$(getopt -l help,namespace: -n "$(basename "$0")" -o hn: -- "$@"); then
    printf 'See "%s --help" for available options\n' "$(basename "$0")" >&2
    exit 2
  fi

  eval set -- "$ARGS"
fi

# The following command-line argument and option parser is based on
# <http://mywiki.wooledge.org/BashFAQ/035>.
while :; do
  case $1 in
    -h|-\?|--help)
      help
      exit
      ;;
    -n|--namespace)
      if [ "$2" ]; then
        FZF_DEFAULT_COMMAND="${FZF_DEFAULT_COMMAND} --namespace='$2'"
        SELECTED_NAMESPACE="$2"
        shift
      else
        echo 'ERROR: "-n/--namespace" requires a non-empy option argument' >&2
        exit 2
      fi
      ;;
    -n=?*|--namespace=?*)
      FZF_DEFAULT_COMMAND="${FZF_DEFAULT_COMMAND} --namespace='${1#*=}'"
      SELECTED_NAMESPACE="${1#*=}"
      ;;
    --n=|--namespace=)
      echo 'ERROR: "-n/--namespace" requires a non-empy option argument' >&2
      exit 2
      ;;
    --)
      shift
      break
      ;;
    -?*)
      printf 'ERROR: Unknown option: "%s"\n' "$1" >&2
      printf 'See "%s --help" for available options\n' "$(basename "$0")" >&2
      exit 2
      ;;
    *)
      break
  esac

  shift
done

if ! type 'fzf' 1>/dev/null 2>&1 || \
  ! type 'kubectl' 1>/dev/null 2>&1 || \
  ! type 'xsel' 1>/dev/null 2>&1;
then
  printf 'ERROR: "%s" requires fzf, kubectl, and xsel\n' "$(basename "$0")" >&2
  exit 2
fi

if [ -n "${FZF_DEFAULT_COMMAND##*--namespace*}" ]; then
  FZF_DEFAULT_COMMAND="${FZF_DEFAULT_COMMAND} --all-namespaces"
fi

INITIAL_INPUT=$(eval "$FZF_DEFAULT_COMMAND")

[ -z "$INITIAL_INPUT" ] && exit 2

set +e

# CTRL+Z process suspension is suppressed as it doesn't work properly
# (see <https://github.com/junegunn/fzf/issues/2289>). Escape is also
# ignored as spamming it to abort fzf occasionally adds garbage "[A"
# entries to the Bash command history.
#
# Dash is a little bit faster at executing shell commands; see
# <https://github.com/junegunn/fzf/issues/4367#issuecomment-2831703942>.
FZF_OUTPUT=$(\
  # shellcheck disable=SC2016
  echo "$INITIAL_INPUT" | fzf \
    --bind="ctrl-r:reload:$FZF_DEFAULT_COMMAND" \
    --bind='ctrl-z:ignore,esc:ignore' \
    --border \
    --expect='ctrl-d,ctrl-l,ctrl-y,ctrl-alt-y,f1' \
    --header='CTRL+D: Describe ╱ CTRL+L: Logs ╱ CTRL+R: Refresh ╱ CTRL+Y: Copy pod name ╱ ENTER: Shell' \
    --header-lines=1 \
    --info='inline-right' \
    --layout=reverse \
    --prompt "$(kubectl config current-context | sed 's/-context$//')> " \
    --query="$1" \
    --with-shell='/usr/bin/dash -c' \
)
FZF_STATUS="$?"

if [ "$FZF_STATUS" != 0 ]; then
  # Allow this script to exit cleanly if fzf exits with a return code of
  # 130, signalling that it was aborted or interrupted by the user.
  if [ "$FZF_STATUS" = 130 ]; then
    exit
  else
    exit $FZF_STATUS
  fi
fi

set -e

SELECTED_ACTION=$(echo "$FZF_OUTPUT" | head -1)
SELECTED_ITEM=$(echo "$FZF_OUTPUT" | tail -1)

if [ -z "${SELECTED_NAMESPACE+x}" ]; then
  SELECTED_NAMESPACE=$(echo "$SELECTED_ITEM" | awk -F' +' '{print $1}')
  SELECTED_POD=$(echo "$SELECTED_ITEM" | awk -F' +' '{print $2}')
else
  SELECTED_POD=$(echo "$SELECTED_ITEM" | awk '{print $1}')
fi

case $SELECTED_ACTION in
  f1)
    help
    ;;
  ctrl-d)
    exec kubectl describe pod --namespace="$SELECTED_NAMESPACE" "$SELECTED_POD"
    ;;
  ctrl-l)
    exec kubectl logs --all-containers --namespace="$SELECTED_NAMESPACE" --tail=500 "$SELECTED_POD"
    ;;
  ctrl-y)
    printf "%s" "$SELECTED_POD" | xsel -i --clipboard
    echo "[✔] Copied \"$SELECTED_POD\" to the clipboard!"
    ;;
  ctrl-alt-y)
    OUTPUT=$(printf "%s %s" "$SELECTED_NAMESPACE" "$SELECTED_POD")
    printf "%s" "$OUTPUT" | xsel -i --clipboard
    echo "[✔] Copied \"$OUTPUT\" to the clipboard!"
    ;;
  *)
    exec kubectl exec -it --namespace="$SELECTED_NAMESPACE" "$SELECTED_POD" -- bash
    ;;
esac
