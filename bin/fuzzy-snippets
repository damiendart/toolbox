#!/bin/sh
#
# A simple fzf-powered snippet browser and selector script.
#
# See also "$HOME/.vim/plugin/fuzzy-snippets.vim".
#
# This file was written by Damien Dart, <damiendart@pobox.com>. This is
# free and unencumbered software released into the public domain. For
# more information, please refer to the accompanying "UNLICENCE" file.

set -e

help() {
  cat << HELP
Usage: $(basename "$0") [-h|--help] [--stdout]

Opens up a fzf-powered snippet browser.

Requires fzf, ripgrep, and xsel, and that the SNIPPET_LIBRARY_ROOT
environment variable is set to the location of your snippets directory.

The list of snippets can be tamed with a "fuzzy-snippets.ignore" file in
the root of your snippets directory. See the ripgrep documentation for
more information on ignoring files.

Pressing Enter will copy the selected snippet to the clipboard.
Alternatively, the selected snippet can be printed to standard input
by pressing Ctrl-O.

FLAGS:

  -h, --help      Displays this help text and exits.
HELP
}

# shellcheck disable=2034
FZF_DEFAULT_COMMAND='rg --files --ignore-file="fuzzy-snippets.ignore" --sort=path'

# The following command-line argument and option parser is based on
# <http://mywiki.wooledge.org/BashFAQ/035>.
while :; do
  case $1 in
    -h|-\?|--help)
      help
      exit
      ;;
    --)
      shift
      break
      ;;
    -?*)
      printf 'ERROR: Unknown option: "%s"\n' "$1" >&2
      printf 'See "%s --help" for available options\n' "$(basename "$0")" >&2
      exit 2
      ;;
    *)
      break
  esac

  shift
done

if ! type 'fzf' 1>/dev/null 2>&1 || \
  ! type 'rg' 1>/dev/null 2>&1 || \
  ! type 'xsel' 1>/dev/null 2>&1;
then
  printf 'ERROR: "%s" requires fzf, ripgrep, and xsel\n' "$(basename "$0")" >&2
  exit 2
fi

if [ ! -d "$SNIPPET_LIBRARY_ROOT" ]; then
  echo 'ERROR: Snippets cannot be found' >&2
  printf 'See "%s --help" for more information\n' "$(basename "$0")" >&2
  exit 2
fi

cd "$SNIPPET_LIBRARY_ROOT"

FZF_OUTPUT=$(\
  fzf \
    --expect="ctrl-o" \
    --preview='(bat --color=always --style=plain {} || cat {}) 2>/dev/null' \
    --prompt='--%<-- ' \
)
SELECTED_ACTION=$(echo "$FZF_OUTPUT" | head -1)
SELECTED_FILE=$(echo "$FZF_OUTPUT" | tail -1)

case $SELECTED_ACTION in
  ctrl-o)
    cat "$SELECTED_FILE"
    ;;
  *)
    xsel -i --clipboard < "$SELECTED_FILE"
    echo "[âœ”] Copied snippet \"$SELECTED_FILE\" to the clipboard!"
    ;;
esac
