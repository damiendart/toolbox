#!/bin/sh
#
# A snippet browser and selector.
#
# This file was written by Damien Dart, <damiendart@pobox.com>. This is
# free and unencumbered software released into the public domain. For
# more information, please refer to the accompanying "UNLICENCE" file.

set -e

help() {
  cat << HELP
A snippet browser and selector.

Usage: $(basename "$0") [FLAGS] [INITIAL-QUERY...]

Requires fzf, ripgrep, snippet-placeholder, and xsel, and that the
SNIPPET_PATH environment variable is set to a colon-seperated list of
directories containing files to use as snippets.

Placeholder content in snippets are expanded using snippet-placeholder.
For more information, see <https://github.com/damiendart/snippets>.

If the GNU version of getopt is available it will be used to preprocess
command-line arguments, enabling support for grouped short options and
other niceties.

FLAGS:

  -h, --help
    Display this help text and exit.

  -l, --list
    Print out a list of available snippet files and exits.

  --vim
    Adjust the application's functionality for better Vim integration.
    For more information, search for ":FS" in Vim's help.

ACTIONS:

  ENTER
    Copy the selected snippet to the clipboard.

  CTRL-C
    Exit without any further action.

  CTRL-P
    Print the selected snippet to standard output.

  F1
    Display this help text and exit.
HELP
}

LIST_FILES=0
VIM_MODE=0

# Using the GNU version of getopt to parse command-line arguments adds
# support for grouped short options and other niceties.
if test "$(getopt --test >/dev/null 2>&1 && echo "$?" || echo "$?")" -eq 4; then
  if ! ARGS=$(getopt -l help,list,vim -n "$(basename "$0")" -o hl -- "$@"); then
    printf 'See "%s --help" for available options\n' "$(basename "$0")" >&2
    exit 2
  fi

  eval set -- "$ARGS"
fi

if ! type 'fzf' 1>/dev/null 2>&1 || \
  ! type 'rg' 1>/dev/null 2>&1 || \
  ! type 'snippet-placeholder' 1>/dev/null 2>&1 || \
  ! type 'xsel' 1>/dev/null 2>&1;
then
  printf 'ERROR: "%s" requires fzf, ripgrep, snippet-placeholder, and xsel\n' "$(basename "$0")" >&2
  exit 2
fi

if [ -z ${SNIPPET_PATH+x} ]; then
  echo 'ERROR: SNIPPET_PATH environment variable has not been set' >&2
  printf 'See "%s --help" for more information\n' "$(basename "$0")" >&2
  exit 2
fi

# The following command-line argument and option parser is based on
# <http://mywiki.wooledge.org/BashFAQ/035>.
while :; do
  case $1 in
    -h|-\?|--help)
      help
      exit
      ;;
    -l|--list)
      LIST_FILES=1
      shift
      break
      ;;
    --vim)
      VIM_MODE=1
      shift
      ;;
    --)
      shift
      break
      ;;
    -?*)
      printf 'ERROR: Unknown option: "%s"\n' "$1" >&2
      printf 'See "%s --help" for available options\n' "$(basename "$0")" >&2
      exit 2
      ;;
    *)
      break
  esac

  shift
done

IFS=':'
SNIPPET_FILES=''

for DIRECTORY in $SNIPPET_PATH; do
  if [ ! -d "$DIRECTORY" ]; then
    continue
  fi

  if [ "$SNIPPET_FILES" ]; then
    SNIPPET_FILES="$SNIPPET_FILES\n$(rg --files --sort=path "$DIRECTORY")"
  else
    SNIPPET_FILES="$(rg --files --sort=path "$DIRECTORY")"
  fi
done

if [ "$LIST_FILES" = 1 ]; then
  echo "$SNIPPET_FILES"
  exit
fi

FZF_EXPECT='ctrl-p,f1'
FZF_LABEL='ENTER: Copy snippet ╱ CTRL+P: Print snippet ╱ F1: Help'
IFS=' '
INITIAL_QUERY="$*"

if [ "$VIM_MODE" = 1 ]; then
  FZF_EXPECT='ctrl-y,f1'
  FZF_LABEL='ENTER: insert ╱ CTRL+Y: yank ╱ F1: help'
fi

set +e

# CTRL+Z process suspension is suppressed as it doesn't work properly
# (see <https://github.com/junegunn/fzf/issues/2289>). Escape is also
# ignored as spamming it to abort fzf occasionally adds garbage "[A"
# entries to the Bash command history.
FZF_OUTPUT=$(\
  echo "$SNIPPET_FILES" | sort | fzf \
    --bind='ctrl-z:ignore,esc:ignore' \
    --bind='backward-eof:abort' \
    --border-label="$FZF_LABEL" \
    --border-label-pos='-3:bottom' \
    --delimiter='/' \
    --expect="$FZF_EXPECT" \
    --info='inline-right' \
    --preview='cat {} 2>/dev/null' \
    --preview-window='<80(down)' \
    --prompt='--%<-- ' \
    --query="$INITIAL_QUERY" \
    --scheme='path' \
    --with-nth='-1' \
)
FZF_STATUS="$?"

if [ "$FZF_STATUS" != 0 ]; then
  # Allow this script to exit cleanly if fzf exits with a return code of
  # 130, signalling that it was aborted or interrupted by the user.
  if [ "$FZF_STATUS" = 130 ]; then
    exit
  else
    exit $FZF_STATUS
  fi
fi

set -e

SELECTED_ACTION=$(echo "$FZF_OUTPUT" | head -1)
SELECTED_FILE=$(echo "$FZF_OUTPUT" | tail -1)

case $SELECTED_ACTION in
  f1)
    if [ "$VIM_MODE" = 1 ]; then
      echo "$SELECTED_ACTION"
    else
      help
    fi
    ;;
  ctrl-p)
    snippet-placeholder "$SELECTED_FILE"
    ;;
  *)
    SNIPPET="$(snippet-placeholder "$SELECTED_FILE")"

    if [ "$VIM_MODE" = 1 ]; then
      printf "%s\n%s" "$SELECTED_ACTION" "$SNIPPET"
    else
      printf "%s" "$SNIPPET" | xsel -i --clipboard
      echo "[✔] Copied snippet \"$SELECTED_FILE\" to the clipboard!"
    fi
    ;;
esac
