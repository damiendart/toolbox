#!/usr/bin/env python3
"""
Checks Git repositories for dirty working directories and unpushed work.
"""

# This file was written by Damien Dart, <damiendart@pobox.com>. This is
# free and unencumbered software released into the public domain. For
# more information, please refer to the accompanying "UNLICENCE" file.

import argparse
import os
import pathlib
import subprocess
import sys
import typing


def check_repository(
    repository: str,
    check_dirty_directories=True,
    check_stashes=True,
    check_unpushed_commits=True,
    check_upstream_branches=True,
) -> typing.Tuple[typing.List[str], typing.List[str]]:
    repository = os.path.abspath(repository)

    errors = []
    warnings = []

    def add_error(s: str):
        errors.append('[âœ˜] "{}": {}'.format(repository, s))

    def add_warning(s: str):
        warnings.append('[-] "{}": {}'.format(repository, s))

    if not os.path.exists(os.path.join(repository, ".git")):
        add_warning("Not a Git repository")

        return errors, warnings

    if check_dirty_directories:
        if run_git_command("git status --porcelain", repository):
            add_error("Working directory is dirty")

    if check_stashes:
        if run_git_command("git stash list", repository):
            add_error("Repository has stashed modifications")

    if check_unpushed_commits or check_upstream_branches:
        branches = run_git_command(
            'git for-each-ref --format="%(refname:short)\t%(upstream:short)\t%(upstream:trackshort)" refs/heads',  # noqa: E501
            repository,
        )

        for branch in branches.splitlines():
            [name, upstream_branch_name, status] = branch.split("\t")
            error_base = 'Branch "{}" has '.format(name)

            if not upstream_branch_name and check_upstream_branches:
                add_error(error_base + "no corresponding upstream branch")

                continue

            if ">" in status and check_unpushed_commits:
                add_error(error_base + "unpushed commits")

    return errors, warnings


def main(arguments: argparse.Namespace) -> None:
    errors_found = False

    for directory in arguments.repositories:
        errors, warnings = check_repository(
            directory,
            arguments.check_dirty_directories,
            arguments.check_stashes,
            arguments.check_unpushed_commits,
            arguments.check_upstream_branches,
        )

        if errors:
            errors_found = True

        for warning in warnings:
            print(warning)

        for error in errors:
            print(error)

    if errors_found:
        sys.exit(1)


def parse_arguments(arguments: typing.List[str]) -> argparse.Namespace:
    parser = argparse.ArgumentParser(description=__doc__)

    parser.add_argument(
        "-c",
        "--no-unpushed-commits",
        action="store_false",
        dest="check_unpushed_commits",
        help="do not show branches with unpushed commits",
    )
    parser.add_argument(
        "-d",
        "--no-dirty-directories",
        action="store_false",
        dest="check_dirty_directories",
        help="do not show repositories with dirty working directories",
    )
    parser.add_argument(
        "-s",
        "--no-stashes",
        action="store_false",
        dest="check_stashes",
        help="do not show repositories with stashed modifications",
    )
    parser.add_argument(
        "-u",
        "--no-upstream-branches",
        action="store_false",
        dest="check_upstream_branches",
        help="do not show branches with no corresponding upstream branch",
    )
    parser.add_argument(
        "repositories",
        default=["."],
        help="local git repositories to check",
        nargs="*",
        type=pathlib.Path,
    )

    return parser.parse_args(arguments)


def run_git_command(command: str, cwd: str) -> str:
    try:
        output = subprocess.check_output(
            command,
            cwd=cwd,
            shell=True,
            stderr=subprocess.STDOUT,
        )
    except subprocess.CalledProcessError as e:
        if isinstance(e.output, bytes):
            e.output = e.output.decode("utf-8")

        print(
            '{}: git error: "{}"'.format(
                os.path.basename(sys.argv[0]),
                e.output.splitlines()[0],
            ),
            file=sys.stderr,
        )

        raise SystemExit(1)

    return output.decode("utf-8") if isinstance(output, bytes) else output


if __name__ == "__main__":
    arguments = parse_arguments(sys.argv[1:])

    main(arguments)
