#!/usr/bin/env python3
"""
An opinionated Markdown-formatting script.

(Ab)uses Pandoc (<https://pandoc.org/>).
"""

# This file was written by Damien Dart, <damiendart@pobox.com>. This is
# free and unencumbered software released into the public domain. For
# more information, please refer to the accompanying "UNLICENCE" file.

import argparse
import concurrent.futures
import os
import pathlib
import re
import shutil
import subprocess
import sys
import typing


def fatal_error(message: str) -> None:
    print(
        "{}: error: {}".format(os.path.basename(sys.argv[0]), message),
        file=sys.stderr,
    )

    raise SystemExit(1)


def format_markdown(
    markdown: str,
    wrap_text: bool,
    remove_private_notes: bool,
) -> str:
    markdown = subprocess.check_output(
        [
            "pandoc",
            "-f",
            "markdown",
            "-t",
            "".join(
                [
                    # For a list of Pandoc Markdown extensions, see
                    # <https://pandoc.org/MANUAL.html#pandocs-markdown>.
                    "markdown",
                    "+definition_lists",
                    "+pipe_tables",
                    "-bracketed_spans",
                    "-raw_attribute",
                    "-shortcut_reference_links",
                    "-simple_tables",
                    "-smart",
                ],
            ),
            "--reference-links",
            "--reference-location=section",
            "--columns=72" if wrap_text else "--wrap=none",
            "--tab-stop=4",
        ],
        input=markdown,
        text=True,
    )

    if remove_private_notes:
        markdown = markdown.split("---")[0].strip()

    # Surround the URL portion of reference links with angle brackets
    # to match the syntax of automatic links.
    markdown = re.sub(
        r"(?<=]: )((https?|mailto):[^ \n]+)",
        r"<\g<0>>",
        markdown,
    )

    # Convert first-level ATX-style headings to setext-style.
    markdown = re.sub(
        r"^# (.*)",
        lambda m: "\n".join([m.group(1), re.sub(".", "=", m.group(1))]),
        markdown,
        flags=re.MULTILINE,
    )

    # Add extra spacing before a second-level heading, unless it
    # immediately follows a first-level heading.
    markdown = re.sub(
        r"(?<!=\n\n)^## ",
        r"\n\g<0>",
        markdown,
        flags=re.MULTILINE,
    )

    return markdown.strip()


def main(arguments: argparse.Namespace) -> None:
    remove_private_notes = not arguments.keep_private_notes
    wrap_text = not arguments.no_wrap

    if arguments.outdir:
        os.makedirs(arguments.outdir, 0o700, True)

        def process_file(infile):
            input = infile.read().strip()

            infile.close()

            outfile = open(
                os.path.join(
                    arguments.outdir,
                    # Black gets a little confused here and keeps
                    # wrapping this conditional expression with
                    # parentheses.
                    # fmt: off
                    "stdin.md"
                    if infile.name == "<stdin>"
                    else os.path.basename(infile.name),
                    # fmt: on
                ),
                "w",
            )

            outfile.write(
                format_markdown(input, wrap_text, remove_private_notes) + "\n",
            )
            outfile.close()
            print('[✔] Written "{}"'.format(os.path.abspath(outfile.name)))

        with concurrent.futures.ThreadPoolExecutor() as executor:
            for infile in arguments.infiles:
                executor.submit(process_file, infile)

    elif arguments.in_place:

        def process_file(infile):
            input = infile.read().strip()

            infile.close()

            outfile = open(infile.name, "w")

            outfile.write(
                format_markdown(input, wrap_text, remove_private_notes) + "\n",
            )
            outfile.close()
            print('[✔] Tidied up "{}"'.format(os.path.abspath(outfile.name)))

        with concurrent.futures.ThreadPoolExecutor() as executor:
            for infile in arguments.infiles:
                executor.submit(process_file, infile)

    else:
        input = ""

        for infile in arguments.infiles:
            input = input + "\n\n" + infile.read().strip()
            infile.close()

        if isinstance(arguments.outfile, pathlib.Path):
            arguments.outfile = arguments.outfile.open(mode="w")

        arguments.outfile.write(
            format_markdown(input, wrap_text, remove_private_notes) + "\n",
        )


def parse_arguments(arguments: typing.List[str]) -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )
    parser.add_argument(
        "infiles",
        help="input Markdown files to be processed",
        nargs="*",
        type=argparse.FileType("r"),
        default=[sys.stdin],
    )
    parser.add_argument(
        "--no-wrap",
        action="store_true",
        dest="no_wrap",
        help="do not wrap text",
    )
    parser.add_argument(
        "--keep-private-notes",
        action="store_true",
        dest="keep_private_notes",
        help='keep content after the first "---"',
    )

    group = parser.add_mutually_exclusive_group()
    group.add_argument(
        "-i",
        "--in-place",
        action="store_true",
        help="edit files in place",
    )
    group.add_argument(
        "--outdir",
        help="write output to individual files in OUTDIR",
        nargs="?",
        type=pathlib.Path,
    )
    group.add_argument(
        "-o",
        "--outfile",
        help="write output to OUTFILE instead of standard output",
        default=sys.stdout,
        nargs="?",
        type=pathlib.Path,
    )

    return parser.parse_args(arguments)


if __name__ == "__main__":
    arguments = parse_arguments(sys.argv[1:])

    if not shutil.which("pandoc"):
        fatal_error("Pandoc is required")

    main(arguments)
