#!/usr/bin/env python3
"""
A simple Markdown-tidying script.

This script uses Pandoc (<https://pandoc.org/>) to do the majority of
the tidying-up.

This file was written by Damien Dart, <damiendart@pobox.com>. This is
free and unencumbered software released into the public domain. For
more information, please refer to the accompanying "UNLICENCE" file.
"""

import argparse
import os
import pathlib
import re
import shutil
import subprocess
import sys


def process_markdown(markdown):
    pandoc_command = "pandoc -f markdown -t gfm+definition_lists --reference-links --reference-location=section --columns=72 --tab-stop=4"  # noqa: E501
    process = subprocess.run(
        pandoc_command.split(" "),
        capture_output=True,
        input=markdown,
        text=True,
    )
    processed_markdown = process.stdout.strip()

    # fmt: off
    processed_markdown = re.sub(
        r"(https?|mailto):[^ \n]+",
        r"<\g<0>>",
        processed_markdown
    )
    # fmt: on
    processed_markdown = re.sub(
        r"^##? ",
        r"\n\g<0>",
        processed_markdown,
        flags=re.MULTILINE,
    )
    processed_markdown = re.sub(
        r"^# (.*)",
        lambda m: "{0}\n{1}".format(m.group(1), re.sub(".", "=", m.group(1))),
        processed_markdown,
        flags=re.MULTILINE,
    )
    processed_markdown = re.sub(
        r"=\n\n\n##",
        "=\n\n##",
        processed_markdown,
        flags=re.MULTILINE,
    )

    return processed_markdown.strip()


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "infiles",
        help="input Markdown files to be processed",
        nargs="*",
        type=argparse.FileType("r"),
        default=sys.stdin,
    )

    group = parser.add_mutually_exclusive_group()
    group.add_argument(
        "--outdir",
        help="write output to individual files in OUTDIR",
        nargs="?",
        type=pathlib.Path,
    )
    group.add_argument(
        "--outfile",
        help="write output to OUTFILE instead of standard output",
        default=sys.stdout,
        nargs="?",
        type=pathlib.Path,
    )

    if not shutil.which("pandoc"):
        parser.exit(1, "Error: Pandoc is required\n")

    arguments = parser.parse_args()

    if not isinstance(arguments.infiles, list):
        arguments.infiles = [arguments.infiles]

    if arguments.outdir:
        os.makedirs(arguments.outdir, 0o700, True)

        for infile in arguments.infiles:
            input = infile.read().strip()

            infile.close()

            outfile = open(
                os.path.join(
                    arguments.outdir,
                    "stdin.md"
                    if infile.name == "<stdin>"
                    else os.path.basename(infile.name),
                ),
                "w",
            )

            outfile.write(process_markdown(input) + "\n")
    else:
        input = ""

        for infile in arguments.infiles:
            input = input + "\n\n" + infile.read().strip()
            infile.close()

        if isinstance(arguments.outfile, pathlib.Path):
            arguments.outfile = arguments.outfile.open(mode="w")

        arguments.outfile.write(process_markdown(input) + "\n")
