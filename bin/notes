#!/usr/bin/env python3
"""
Note-taking helper doohickeys.

This file was written by Damien Dart, <damiendart@pobox.com>. This is
free and unencumbered software released into the public domain. For
more information, please refer to the accompanying "UNLICENCE" file.
"""

import argparse
import datetime
import os
import shutil
import subprocess
import sys
import time


def fatal_error(message):
    print(
        "{}: error: {}".format(os.path.basename(sys.argv[0]), message),
        file=sys.stderr,
    )

    raise SystemExit(1)


def open_note(notes_directory, filename):
    if os.environ.get("VIM_TERMINAL"):
        # The following functionality uses Vim's terminal API to open
        # files in the existing Vim instance instead of opening a new
        # instance of Vim inside the terminal window. For more
        # information, search for "terminal-api" in Vim's help.
        print(f'\033]51;["drop", "{filename}"]\007', end="")
    else:
        subprocess.run(
            [os.environ.get("EDITOR", "vim"), filename],
            cwd=notes_directory,
        )


def parse_arguments(arguments):
    parser = argparse.ArgumentParser()
    subparser = parser.add_subparsers(dest="command", required=True)

    inbox_parser = subparser.add_parser(
        "inbox",
        help="open top-level inbox note in $EDITOR",
    )
    inbox_parser.set_defaults(function=run_inbox_command)

    jot_parser = subparser.add_parser(
        "jot",
        help="append timestamped text to top-level inbox note",
    )
    jot_parser.add_argument("text", help="text to append", nargs="*")
    jot_parser.set_defaults(function=run_jot_command)

    list_tags_parser = subparser.add_parser(
        "list-tags",
        aliases=["tags"],
        help="list all tags in use",
    )
    list_tags_parser.set_defaults(function=run_list_tags_command)

    new_parser = subparser.add_parser(
        "new",
        aliases=["create", "edit", "open"],
        help="create a new note",
    )
    new_parser.add_argument(
        "-z",
        "--zettel",
        action="store_true",
        help="update filename to a Zettelkasten-style format",
    )
    new_parser.add_argument("filename", help="note filename", nargs=1)
    new_parser.set_defaults(function=run_new_command)

    return parser.parse_args(arguments)


def run_inbox_command(notes_directory, arguments):
    open_note(notes_directory, os.path.join(notes_directory, "inbox.md"))


def run_jot_command(notes_directory, arguments):
    text = " ".join(arguments.text) if arguments.text else input("> ")

    with open(os.path.join(notes_directory, "inbox.md"), "a") as inbox_file:
        inbox_file.write("\n- {}: {}".format(time.ctime(), text))

        # Some characters, such as "#" and quotation marks, may cause
        # unintended side-effects when inputting text as positional
        # arguments. Displaying the input gives the user the opportunity
        # to confirm that it is what they intended.
        if arguments.text:
            print(text)


def run_list_tags_command(notes_directory, arguments):
    if not shutil.which("rg"):
        fatal_error("ripgrep is required")

    tags = (
        subprocess.run(
            [
                "rg",
                "-INo",
                "-r",
                "$1",
                "--no-heading",
                "[ ']#([a-zA-Z:-]+)",
            ],
            capture_output=True,
            check=True,
            cwd=notes_directory,
        )
        .stdout.decode()
        .strip()
        .split("\n")
    )

    print("\n".join(sorted(set(tags))))


def run_new_command(notes_directory, arguments):
    filename = os.path.basename(os.path.splitext(arguments.filename[0])[0])

    if arguments.zettel:
        filename = "{0:%Y}/{0:%m}/{0:%Y%m%d%H%M}-{1}".format(
            datetime.datetime.now(), filename
        )

    filename = os.path.abspath(
        os.path.join(
            notes_directory,
            os.path.dirname(arguments.filename[0]),
            filename + ".md",
        )
    )

    if os.path.commonpath([notes_directory, filename]) != notes_directory:
        fatal_error("File would be created outside of NOTES_ROOT")

    os.makedirs(os.path.dirname(filename), 0o700, True)
    open_note(notes_directory, filename)


if __name__ == "__main__":
    arguments = parse_arguments(sys.argv[1:])
    notes_directory = os.path.abspath(os.environ.get("NOTES_ROOT", None))

    if not notes_directory:
        fatal_error("NOTES_ROOT environment variable not set")

    if not os.path.isdir(notes_directory):
        fatal_error('"{}" is not a directory'.format(notes_directory))

    arguments.function(notes_directory, arguments)
