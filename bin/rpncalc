#!/usr/bin/env python3
"""
A simple command-line Reverse Polish Notation calculator.

Inspired by <https://johnlekberg.com/blog/2020-05-22-cli-rpn.html>.
"""

# This file was written by Damien Dart, <damiendart@pobox.com>. This is
# free and unencumbered software released into the public domain. For
# more information, please refer to the accompanying "UNLICENCE" file.

import argparse
import atexit
import decimal
import inspect
import math
import os
import readline
import typing
import sys


HISTORY_FILE = os.path.join(os.path.expanduser("~"), ".rpncalc-history")


class RPNCalculator:
    def __init__(self):
        self._stack = []
        self._operations = {}

    def operation(self, code: str):
        def decorator(func):
            spec = inspect.signature(func)

            def op(*args):
                arity = len(spec.parameters)

                if len(self._stack) < arity:
                    raise IndexError(
                        f"{code!a} requires {arity} item{'s'[:arity ^ 1]} on stack"  # noqa: E501
                    )

                arguments = [self._stack.pop() for _ in range(arity)]
                result = func(*reversed(arguments))

                self._stack.extend(result)

            self._operations[code] = op

            return func

        return decorator

    @property
    def keywords(self):
        return tuple(self._operations.keys())

    def execute(self, token: str) -> typing.Optional[decimal.Decimal]:
        if token in self._operations:
            self._operations[token]()
        else:
            try:
                number = decimal.Decimal(token)
                self._stack.append(number)
            except decimal.InvalidOperation:
                raise ValueError(f"unrecognised command: {token}")

        try:
            return self._stack[-1]
        except IndexError:
            return None

    @property
    def stack(self):
        return tuple(self._stack)


class RPNInterpreter:
    def __init__(self, calculator):
        self._calculator = calculator

    def execute(self, line) -> typing.Union[decimal.Decimal, None, str]:
        line = line.lower().strip()
        retval = None

        for token in line.split():
            if token == "exit":
                raise SystemExit(0)
            elif token == "stack":
                retval = f"[{', '.join([str(i) for i in self._calculator.stack])}]"  # noqa: E501
            else:
                retval = self._calculator.execute(token)

        return retval

    @property
    def keywords(self):
        return self._calculator.keywords + ("exit", "stack")


def make_calculator() -> RPNCalculator:
    calculator = RPNCalculator()

    @calculator.operation("+")
    @calculator.operation("add")
    def add(x, y):
        return [x + y]

    @calculator.operation("-")
    @calculator.operation("sub")
    def subtract(x, y):
        return [x - y]

    @calculator.operation("*")
    @calculator.operation("mul")
    def multiply(x, y):
        return [x * y]

    @calculator.operation("/")
    @calculator.operation("div")
    def divide(x, y):
        return [x / y]

    @calculator.operation("**")
    @calculator.operation("pow")
    def pow(x, y):
        return [x**y]

    @calculator.operation("drop")
    def drop(x):
        return []

    @calculator.operation("dup")
    def dup(x):
        return [x, x]

    @calculator.operation("pi")
    def pi():
        return [decimal.Decimal(math.pi)]

    @calculator.operation("swap")
    def swap(x, y):
        return [y, x]

    return calculator


def make_completer(interpreter):
    def complete(text, state):
        keywords = interpreter.keywords
        results = [x for x in keywords if x.startswith(text)] + [None]

        return results[state] + " "

    return complete


def parse_arguments(arguments: typing.List[str]) -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )
    parser.add_argument(
        "input",
        help="input to be executed, replaces standard input",
        nargs="*",
    )

    return parser.parse_args(arguments)


if __name__ == "__main__":
    arguments = parse_arguments(sys.argv[1:])
    calculator = make_calculator()
    has_input = True
    interpreter = RPNInterpreter(calculator)

    if not arguments.input or sys.stdin.isatty():
        atexit.register(readline.write_history_file, HISTORY_FILE)
        readline.parse_and_bind("tab: complete")
        readline.set_completer(make_completer(interpreter))
        readline.set_history_length(1000)

        if os.path.exists(HISTORY_FILE):
            readline.read_history_file(HISTORY_FILE)

    while has_input:
        try:
            if arguments.input:
                line = " ".join(arguments.input)
                has_input = False
            elif not sys.stdin.isatty():
                line = sys.stdin.read().strip()
                has_input = False
            else:
                line = input("> ").strip()

            result = interpreter.execute(line)
        except (EOFError, KeyboardInterrupt):
            print()
            has_input = False
            continue
        except decimal.DivisionByZero:
            print("ERROR: division by zero")
            continue
        except Exception as e:
            print("ERROR:", e)
            continue

        if result is not None:
            print(result)
