#!/usr/bin/env python3
"""
A little tool to parse and summarise basic plain-text timesheets.

Inspired by <https://github.com/dantleech/pttlog>, but much smaller in
scope. A timesheet file represents a day of tasks, and entries are lines
that start with a timestamp followed by a description, eg:

09:00 Morning routine and meeting
09:30 A task that lasts an hour
10:30-12:00 Another task with an optional end time

Entries must be in chronological order. If an entry does not include an
end time the start time of the following task is used, unless it is the
last entry in which case it is considered an ongoing task. Lines that do
not start with a timestamp are ignored.
"""

# This file was written by Damien Dart, <damiendart@pobox.com>. This is
# free and unencumbered software released into the public domain. For
# more information, please refer to the accompanying "UNLICENCE" file.

import argparse
import collections
import dataclasses
import datetime
import itertools
import os
import re
import sys
import typing


parsable_line = re.compile(r"^\d\d:\d\d(-\d\d:\d\d)?\s+")


@dataclasses.dataclass
class Item:
    description: str
    line_number: int
    time_begin: datetime.datetime
    time_end: typing.Optional[datetime.datetime] = None


class TimesheetParseError(Exception):
    def __init__(self, message, line_number):
        super().__init__(message)
        self.line_number = line_number
        self.message = message


def fatal_error(message: str) -> None:
    print(
        "{}: error: {}".format(os.path.basename(sys.argv[0]), message),
        file=sys.stderr,
    )

    raise SystemExit(1)


def main(arguments: argparse.Namespace) -> None:
    entries = []
    longest_task_name_length = 0
    ongoing_task = None
    tasks = collections.defaultdict(datetime.timedelta)
    total = datetime.timedelta()

    for i, line in enumerate(arguments.infile):
        if not re.match(parsable_line, line):
            continue

        try:
            time, description = line.strip().split(maxsplit=1)
        except ValueError:
            raise TimesheetParseError("entry has no description", i + 1)

        if "-" in time:
            start, end = time.split("-")
            entries.append(
                Item(
                    description,
                    i + 1,
                    datetime.datetime.combine(
                        datetime.date.today(),
                        datetime.time.fromisoformat(start),
                    ),
                    datetime.datetime.combine(
                        datetime.date.today(),
                        datetime.time.fromisoformat(end),
                    ),
                )
            )
        else:
            entries.append(
                Item(
                    description,
                    i + 1,
                    datetime.datetime.combine(
                        datetime.date.today(),
                        datetime.time.fromisoformat(time),
                    ),
                )
            )

    arguments.infile.close()

    a, b = itertools.tee(entries)
    next(b, None)

    for entry in a:
        peeking = False
        n = next(b, None)

        if entry.time_end is None:
            if n is None:
                entry.time_end = datetime.datetime.now()
                ongoing_task = entry.description

                if entry.time_begin > entry.time_end:
                    raise TimesheetParseError(
                        "ongoing task cannot start in the future",
                        entry.line_number,
                    )
            else:
                entry.time_end = n.time_begin
                peeking = True

        duration = entry.time_end - entry.time_begin

        if duration < datetime.timedelta(0):
            raise TimesheetParseError(
                "entry contains non-chronological timestamp",
                entry.line_number + 1 if peeking else entry.line_number,
            )

        tasks[entry.description] += duration
        total += duration

        if len(entry.description) > longest_task_name_length:
            longest_task_name_length = len(entry.description)

    for description, duration in tasks.items():
        print(
            f"%-{longest_task_name_length}s   %2sh %2sm%s"
            % (
                description,
                duration.seconds // 3600,
                (duration.seconds // 60) % 60,
                " (ONGOING)" if description == ongoing_task else "",
            ),
        )

    print()
    print(
        f"%-{longest_task_name_length}s   %2sh %2sm"
        % (
            "Total so far" if ongoing_task is not None else "Total",
            total.seconds // 3600,
            (total.seconds // 60) % 60,
        ),
    )


def parse_arguments(arguments: typing.List[str]) -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )
    parser.add_argument(
        "infile",
        help="timesheet file to parse and summarise",
        type=argparse.FileType("r"),
    )

    return parser.parse_args(arguments)


if __name__ == "__main__":
    arguments = parse_arguments(sys.argv[1:])

    try:
        main(arguments)
    except TimesheetParseError as e:
        print(
            "%s:%s: %s" % (arguments.infile.name, e.line_number, e.message),
            file=sys.stderr,
        )
        fatal_error("invalid timesheet")
