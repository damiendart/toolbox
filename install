#!/usr/bin/env python3
"""
A simple dotfile-installing script.

This file was written by Damien Dart, <damiendart@pobox.com>. This is
free and unencumbered software released into the public domain. For
more information, please refer to the accompanying "UNLICENCE" file.
"""

import hashlib
import os
import pathlib
import subprocess
import sys


PATHS_TO_INSTALL = [
    ".bash_aliases",
    ".bash_profile",
    ".bashrc",
    ".config/fish/config.fish",
    ".config/fish/functions/",
    ".config/git/config",
    ".config/git/ignore",
    ".config/nvim/init.vim",
    ".ideavimrc",
    ".profile",
    ".shellrc",
    ".tmux.conf",
    ".vim/after/ftplugin/",
    ".vim/after/plugin/",
    ".vim/after/syntax/",
    ".vim/doc/",
    ".vim/pack/",
    ".vim/plugin/",
    ".vimrc",
]

notice = """
If any shell-related dotfiles have changed, you may need to log out and
log back in, or "source" any new dotfiles so that they take effect in
the current interactive shell session.
""".rstrip()

vim_tags = [
    ".vim/doc/tags",
    ".vim/pack/plugins/opt/editorconfig-fork/doc/tags",
]


if __name__ == "__main__":
    errors = False

    for path in PATHS_TO_INSTALL:
        destination = pathlib.Path(pathlib.Path.home(), path)
        source = pathlib.Path(sys.path[0], path).resolve()

        if os.path.exists(destination):
            if os.path.samefile(destination.resolve(), source):
                print('[-] Link to "{}" already exists'.format(source))
            else:
                print('[✘] "{}" already exists'.format(destination))
                errors = True
        else:
            if os.path.islink(destination):
                print('[✘] "{}" is a dangling symlink'.format(destination))
                errors = True
            else:
                if "/" in path:
                    os.makedirs(os.path.dirname(destination), 0o700, True)

                os.symlink(source, destination)
                print('[✔] Created link to "{}"'.format(source))

    for tag in vim_tags:
        tag_checksum = None
        tag_file = pathlib.Path(pathlib.Path.home(), tag)

        if os.path.exists(tag_file):
            tag_checksum = hashlib.sha256(tag_file.read_bytes()).digest()

        try:
            subprocess.check_output(
                'vim --not-a-term "+try | helptags {} | catch | cq | endtry | q"'.format(  # noqa: E501
                    os.path.dirname(tag_file),
                ),
                shell=True,
                stderr=subprocess.STDOUT,
            )

            if tag_checksum == hashlib.sha256(tag_file.read_bytes()).digest():
                print('[-] "{}" is up-to-date'.format(tag_file))
            else:
                print('[✔] Generated "{}"'.format(tag_file))
        except subprocess.CalledProcessError:
            print(
                '[✘] Vim returned a non-zero status when generating "{}"'.format(  # noqa: E501
                    tag_file,
                ),
            )

            errors = True

    print(notice)

    if errors:
        sys.exit(1)
