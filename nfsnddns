#!/usr/bin/env python

"""A kinda-Dynamic-DNS client for NearlyFreeSpeech.NET-managed domains.

Requires "nfsnapi", available at
<https://www.robotinaponcho.net/git/?p=nfsnapi-python.git>.

Credentials and other required information are read from a
"nfsnddns.cfg" file located either in the current directory or the home
directory of the user running this script. The contents of the
configuration file must adhere to the following structure:

  [credentials]
  apikey = abcdefgh12345678
  username = testuser
  [domain]
  domainname = example.com
  subdomain = test

This file was written by Damien Dart, <damiendart@pobox.com>. This is
free and unencumbered software released into the public domain. For more
information, please refer to the accompanying "UNLICENCE" file.
"""


import ConfigParser
import json
import nfsnapi
import os
import sys
import urllib2


if __name__ == "__main__":
  try:
    config = ConfigParser.ConfigParser()
    config.read(["nfsnddns.cfg", ".nfsnddns.cfg",
        os.path.expanduser("~/.nfsnddns.cfg"),
        os.path.expanduser("~/nfsnddns.cfg")])
    # TODO: Check if IP addresses are being returned.
    old_ip_address = json.loads(nfsnapi.run_request(
        config.get("credentials", "username"),
        config.get("credentials", "apikey"),
        "/dns/%s/listRRs" % config.get("domain", "domainname"),
        "name=%s" % config.get("domain", "subdomain")))[0]["data"]
  except ConfigParser.Error as e:
    sys.stderr.write("ERROR: Unable to parse or read configuration file.\n")
    sys.stderr.write(str(e) + "\n")
    # TODO: Add usage instructions.
    sys.exit(1)
  except IndexError:
    old_ip_address = None
  except nfsnapi.NFSNAPIRequestError as e:
    sys.stderr.write("ERROR: Unable to get old IP address.\n" + str(e) + "\n")
    sys.exit(1)

  try:
    # TODO: Check if IP addresses are being returned.
    new_ip_address = urllib2.urlopen("http://myip.dnsomatic.com/").read().rstrip()
  except:
    sys.stderr.write("ERROR: Unable to get current IP address.\n")
    sys.exit(1)

  try:
    if (old_ip_address != new_ip_address):
      if old_ip_address:
        nfsnapi.run_request(config.get("credentials", "username"),
            config.get("credentials", "apikey"),
            "/dns/%s/removeRR" % config.get("domain", "domainname"),
            "data=%s&name=%s&type=A" % (old_ip_address,
            config.get("domain", "subdomain")))
      nfsnapi.run_request(config.get("credentials", "username"),
          config.get("credentials", "apikey"),
          "/dns/%s/addRR" % config.get("domain", "domainname"),
          "data=%s&name=%s&ttl=180&type=A" % (new_ip_address,
          config.get("domain", "subdomain")))
      print "%s.%s now points to %s." % (config.get("domain", "subdomain"),
          config.get("domain", "domainname"), new_ip_address)
  except nfsnapi.NFSNAPIRequestError as e:
    sys.stderr.write("ERROR: Unable to replace resource record.\n" + str(e) +
        "\nWARNING: Previous resource record may have been deleted.")
    sys.exit(1)
